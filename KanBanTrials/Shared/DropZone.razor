@using KanBanTrials.Models
@using Microsoft.AspNetCore.SignalR;
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager NavManager;
@using KanBanTrials.Data;
@inject IConfiguration Configuration;

<div class="task-main-container">
    <div class="task-header-container"><h4>@Catagory.ToString()</h4><span>(@TaskItems.Where(q => q.Catagory == Catagory.ToString()).Count())</span></div>
    <div class="priority">
        <div class="dropzone"
             ondragover="event.preventDefault();"
            @ondrop="OnDropHandler">
            @if(TaskItems != null)
            {
                foreach (var item in TaskItems.Where(q => q.Catagory == Catagory.ToString()))
                {
                    <div class="draggable"
                        draggable="true"
                        @ondragstart="@(() => OnDragStartHandler(item))"
                        @onclick="@(() => OpenEditDialog(item))">
                        <div class="drop-zone-content">
                            <span>@item.TaskName</span>                           
                            <div class="cat-notes-container">
                               
                                @if (item.DateDue != null)
                                {
                                    <div class="due-date-container">
                                        @if(DateOnly.FromDateTime(DateTime.Now) >= item.DateDue)
                                        {
                                            <span class="due-date-text due-date-text-overdue badge">Due: @item.DateDue</span>
                                        }
                                        else
                                        {
                                                <span class="due-date-text due-date-text-ontime badge">Due: @item.DateDue</span>
                                        }                                        
                                    </div>
                                }
                                <div class="cat-status-container">
                                    <span class="status badge badge-secondary">@item.Status</span>
                                    <span class="cata badge badge-secondary">@item.Catagory</span>
                                    @if (item.OverDueStatus != "")
                                    {
                                        <span class="overdue badge badge-secondary">@item.OverDueStatus</span>
                                    }
                                </div>
                                @if (item.TaskNotes != null)
                                {
                                    if (item.TaskNotes.Count() != 0)
                                    {
                                        <div class="count-container">
                                            <div class="journal-icon">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-journal" viewBox="0 0 16 16">
                                                    <path d="M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2z" />
                                                    <path d="M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1z" />
                                                </svg>

                                                <div class="task-note-count">
                                                    @item.TaskNotes.Count()
                                                </div>
                                            </div>
                                        </div>

                                    }
                                }
                            </div>
                            
                        </div>
                    </div>
                }              
            }
        </div>
    </div>
</div>

@if (OpenEditDialogBox)
{
    <KanBanTrials.Components.EditTaskDetails Task="@CurrentSelectedTaskItem"
        OnClose="ClosedTaskDialog" OnSave="UpdatedTask" ReturnTask="EditReturnTask" />
}


@code {
    [Parameter]
    public List<TaskItem> TaskItems { get; set; }
    [Parameter]
    public TaskCatagory Catagory { get; set; }
    [Parameter]
    public EventCallback<TaskCatagory> OnDrop { get; set; }
    [Parameter]
    public EventCallback<TaskItem> OnStartDrag { get; set; }
    [Parameter]
    public Action CallbackOnDialogSaved { get; set; }

    private int taskCount {get;set;} = 0;

    public TaskItem CurrentSelectedTaskItem { get; set; } = new();
    private Json jsonCode;

    protected override async void OnInitialized()
    {
        base.OnInitialized();

        jsonCode = new();


    }


    private async Task OnDropHandler()
    {      
        OnDrop.InvokeAsync(Catagory);   
    }

    private async Task OnDragStartHandler(TaskItem task)
    {
        OnStartDrag.InvokeAsync(task);

    }

    private void UpdatedTask()
    {
        CallbackOnDialogSaved?.Invoke();
        OpenEditDialogBox = false;
    }

    public bool OpenEditDialogBox { get; set; } = false;

    public void OpenEditDialog(TaskItem taskItem)
    {
        CurrentSelectedTaskItem = taskItem;
        OpenEditDialogBox = true;
    }

    public void ClosedTaskDialog()
    {     
        //CallbackOnDialogSaved?.Invoke();
        OpenEditDialogBox = false;
    }

    public void EditReturnTask()
    {
        if(CurrentSelectedTaskItem.Completed == true)
        {
            UpdateAllTasksFromTaskEdit();
        }
    }

    private void UpdateAllTasksFromTaskEdit()
    {
        jsonCode.SeralizeAndSaveFileList(TaskItems, Configuration["MySettings:FileLocationCurrentJson"], true);
    }
}
